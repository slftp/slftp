stages:
  - build
  - test
  - create sourcecode documentation
  - deploy sourcecode documentation
  - upload
  - release

### build stage ###

.buildwin32: &buildwin32
  stage: build
  artifacts:
    # name of the generated zipfile
    name: "slftp_x86-%CI_JOB_NAME%-%CI_COMMIT_REF_NAME%-%CI_COMMIT_SHA%"
    paths:
      # included files
      - slftp_x86.exe
  script:
    - make.bat slftp_32
  after_script:
    # rename executable
    - ren slftp.exe slftp_x86.exe
  tags:
    - windows
    - delphi 32bit

buildwin32-release:
  <<: *buildwin32
  before_script:
    # delete .git dir to avoid patching in git rev
    - rmdir .git /s /q
  only:
    - tags

buildwin32-development:
  <<: *buildwin32
  except:
    - tags

.buildwin64: &buildwin64
  stage: build
  artifacts:
    # name of the generated zipfile
    name: "slftp_x64-%CI_JOB_NAME%-%CI_COMMIT_REF_NAME%-%CI_COMMIT_SHA%"
    paths:
      # included files
      - slftp_x64.exe
  script:
    - make.bat slftp_64
  after_script:
    # rename executable
    - ren slftp.exe slftp_x64.exe
  tags:
    - windows
    - delphi 64bit

buildwin64-release:
  <<: *buildwin64
  before_script:
    # delete .git dir to avoid patching in git rev
    - rmdir .git /s /q
  only:
    - tags

buildwin64-development:
  <<: *buildwin64
  except:
    - tags

.buildlinux32: &buildlinux32
  stage: build
  artifacts:
    # name of the generated zipfile
    name: "slftp_x86-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}"
    paths:
      # included files
      - slftp_x86
  script:
    - make slftp_32
  after_script:
    # rename executable
    - mv slftp slftp_x86
  tags:
    - linux
    - fpc 32bit

buildlinux32-release:
  <<: *buildlinux32
  before_script:
    # delete .git dir to avoid patching in git rev
    - rm -fr .git
  only:
    - tags

buildlinux32-development:
  <<: *buildlinux32
  except:
    - tags

.buildlinux64: &buildlinux64
  stage: build
  artifacts:
    # name of the generated zipfile
    name: "slftp_x64-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}"
    paths:
      # included files
      - slftp_x64
  script:
    - make slftp_64
  after_script:
    # rename executable
    - mv slftp slftp_x64
  tags:
    - linux
    - fpc 64bit

buildlinux64-release:
  <<: *buildlinux64
  before_script:
    # delete .git dir to avoid patching in git rev
    - rm -fr .git
  only:
    - tags

buildlinux64-development:
  <<: *buildlinux64
  except:
    - tags

### test stage ###

testwin32:
  stage: test
  when: on_success
  before_script:
    - move config\* tests
  script:
    - make.bat test_32
  artifacts:
    paths:
      - tests\dunitx-results.xml
    reports:
      junit: tests\dunitx-results.xml
  tags:
    - windows
    - delphi 32bit

testwin64:
  stage: test
  when: on_success
  before_script:
    - move config\* tests
  script:
    - make.bat test_64
  artifacts:
    paths:
      - tests\dunitx-results.xml
    reports:
      junit: tests\dunitx-results.xml
  tags:
    - windows
    - delphi 64bit

testlinux32:
  stage: test
  when: on_success
  before_script:
    - cp ~/libs/openssl-1.0.2r_64/lib*so .
    - mv config/* tests/
  script:
    - make test
  tags:
    - linux
    - fpc 32bit

testlinux64:
  stage: test
  when: on_success
  before_script:
    - cp ~/libs/openssl-1.0.2r_64/lib*so .
    - mv config/* tests/
  script:
    - make test
  tags:
    - linux
    - fpc 64bit

### sourcecode documentation stage ###

src-docs:
  stage: create sourcecode documentation
  only:
    - dev
  except:
    # not for tag creation as they could be older
    - tags
  when: on_success
  allow_failure: true
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}"
    when: on_success
    paths:
      - src-docs/
  before_script:
    - mkdir src-docs
  script:
    - ~/tools/pasdoc/bin/pasdoc --format html --write-uses-list --output src-docs irccommands/*.pas *.pas slftp.lpr
  tags:
    - linux
    - pasdoc

pages:
  stage: deploy sourcecode documentation
  only:
    - dev
  except:
    # not for tag creation as they could be older
    - tags
  when: on_success
  artifacts:
    when: on_success
    paths:
      - public/
  script:
    - cp -r src-docs public
  tags:
    - linux
    - copy

### package & release stage ###

upload-package-files:
  stage: upload
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic"
  before_script:
    # save environment variables also for release stage
    # get current version
    - echo "VERSION=$(awk '/SL_VERSION:/{print $NF}' slftp.inc | grep -oP '\d\.\d\.\d\w?\d?')" >> build.env
    # package number must be \d.\d.\d
    - echo "NUMBERVERSION=$(awk '/SL_VERSION:/{print $NF}' slftp.inc | grep -oP '\d\.\d\.\d')" >> build.env
    # load env variables before using them
    - source build.env
    # repo url
    - echo "PACKAGE_URL=${PACKAGE_REGISTRY_URL}/slftp_${VERSION}/${NUMBERVERSION}" >> build.env
    # naming convention for files
    - echo "WINDOWS_x86_BINARY=slftp-${VERSION}_x86.exe" >> build.env
    - echo "WINDOWS_x64_BINARY=slftp-${VERSION}_x64.exe" >> build.env
    - echo "LINUX_x86_BINARY=slftp-${VERSION}_x86" >> build.env
    - echo "LINUX_x64_BINARY=slftp-${VERSION}_x64" >> build.env
    - echo "SLCONFIG=slftp-${VERSION}_config.zip" >> build.env
    - echo "SLDOCU=slftp-${VERSION}_documentation.zip" >> build.env
    - echo "SLHELPFILES=slftp-${VERSION}_helpfiles.zip" >> build.env
    # load env variables again
    - source build.env
  script:
    # upload windows versions
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file slftp_x86.exe ${PACKAGE_URL}/${WINDOWS_x86_BINARY}
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file slftp_x64.exe ${PACKAGE_URL}/${WINDOWS_x64_BINARY}
    # upload linux versions
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file slftp_x86 ${PACKAGE_URL}/${LINUX_x86_BINARY}
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file slftp_x64 ${PACKAGE_URL}/${LINUX_x64_BINARY}
    # create config, docs and helpfiles
    - |
      zip -r ${SLCONFIG} config
      zip -r ${SLDOCU} docs
      zip -r ${SLHELPFILES} helpfiles
    # upload config, docs and helpfiles
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${SLCONFIG} ${PACKAGE_URL}/${SLCONFIG}
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${SLDOCU} ${PACKAGE_URL}/${SLDOCU}
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${SLHELPFILES} ${PACKAGE_URL}/${SLHELPFILES}
  artifacts:
    reports:
      # publish environment variables
      dotenv: build.env
  tags:
    - linux
    - curl
    - zip

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  variables:
    # do not fetch the git repository
    GIT_STRATEGY: none
  needs:
    # get environment variables
    - job: upload-package-files
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - >
      release-cli create --name "slFtp ${CI_COMMIT_TAG}" --tag-name ${CI_COMMIT_TAG}
      --assets-link "{\"name\":\"${WINDOWS_x86_BINARY}\",\"url\":\"${PACKAGE_URL}/${WINDOWS_x86_BINARY}\"}"
      --assets-link "{\"name\":\"${WINDOWS_x64_BINARY}\",\"url\":\"${PACKAGE_URL}/${WINDOWS_x64_BINARY}\"}"
      --assets-link "{\"name\":\"${LINUX_x86_BINARY}\",\"url\":\"${PACKAGE_URL}/${LINUX_x86_BINARY}\"}"
      --assets-link "{\"name\":\"${LINUX_x64_BINARY}\",\"url\":\"${PACKAGE_URL}/${LINUX_x64_BINARY}\"}"
      --assets-link "{\"name\":\"${SLCONFIG}\",\"url\":\"${PACKAGE_URL}/${SLCONFIG}\"}"
      --assets-link "{\"name\":\"${SLDOCU}\",\"url\":\"${PACKAGE_URL}/${SLDOCU}\"}"
      --assets-link "{\"name\":\"${SLHELPFILES}\",\"url\":\"${PACKAGE_URL}/${SLHELPFILES}\"}"
  tags:
    - docker
